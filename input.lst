     1                                  ; file.asm - использование файлов в NASM
     2                                  extern printf
     3                                  extern fscanf
     4                                  extern fprintf
     5                                  
     6                                  extern COMPLEX
     7                                  extern FRACTION
     8                                  extern POLAR
     9                                  
    10                                  ;----------------------------------------------
    11                                  ;  Ввод параметров комплексного числа из файла
    12                                  ;----------------------------------------------
    13                                  global InComplex
    14                                  InComplex:
    15                                  section .data
    16 00000000 2564256400                  .infmt db "%d%d",0
    17                                  section .bss
    18 00000000 <res 00000008>              .FILE   resq    1   ; временное хранение указателя на файл
    19 00000008 <res 00000008>              .comp  resq    1   ; адрес комплексного числа
    20                                  section .text
    21 00000000 55                      push rbp
    22 00000001 4889E5                  mov rbp, rsp
    23                                  
    24                                      ; Сохранение принятых аргументов
    25 00000004 48893C25[08000000]          mov     [.comp], rdi          ; сохраняется адрес комплексного числа
    26 0000000C 48893425[00000000]          mov     [.FILE], rsi          ; сохраняется указатель на файл
    27                                  
    28                                      ; Ввод комплексного числа из файла
    29 00000014 488B3C25[00000000]          mov     rdi, [.FILE]
    30 0000001C 48BE-                       mov     rsi, .infmt         ; Формат - 1-й аргумент
    30 0000001E [0000000000000000] 
    31 00000026 488B1425[08000000]          mov     rdx, [.comp]        ; &x
    32 0000002E 488B0C25[08000000]          mov     rcx, [.comp]
    33 00000036 4883C104                    add     rcx, 4              ; &y = &x + 4
    34 0000003A B800000000                  mov     rax, 0              ; нет чисел с плавающей точкой
    35 0000003F E8(00000000)                call    fscanf
    36                                  
    37 00000044 C9                      leave
    38 00000045 C3                      ret
    39                                  
    40                                  ;-------------------------------------------
    41                                  ; Ввод параметров треугольника из файла
    42                                  ;-------------------------------------------
    43                                  global InFraction
    44                                  InFraction:
    45                                  section .data
    46 00000005 25642564256400              .infmt db "%d%d%d",0
    47                                  section .bss
    48 00000010 <res 00000008>              .FILE   resq    1   ; временное хранение указателя на файл
    49 00000018 <res 00000008>              .frac   resq    1   ; адрес дроби
    50                                  section .text
    51 00000046 55                      push rbp
    52 00000047 4889E5                  mov rbp, rsp
    53                                  
    54                                      ; Сохранение принятых аргументов
    55 0000004A 48893C25[18000000]          mov     [.frac], rdi          ; сохраняется адрес дроби
    56 00000052 48893425[10000000]          mov     [.FILE], rsi          ; сохраняется указатель на файл
    57                                  
    58                                      ; Ввод дроби из файла
    59 0000005A 488B3C25[10000000]          mov     rdi, [.FILE]
    60 00000062 48BE-                       mov     rsi, .infmt         ; Формат - 1-й аргумент
    60 00000064 [0500000000000000] 
    61 0000006C 488B1425[18000000]          mov     rdx, [.frac]        ; &a
    62 00000074 488B0C25[18000000]          mov     rcx, [.frac]
    63 0000007C 4883C104                    add     rcx, 4              ; &b = &a + 4
    64 00000080 B800000000                  mov     rax, 0              ; нет чисел с плавающей точкой
    65 00000085 E8(00000000)                call    fscanf
    66                                  
    67 0000008A C9                      leave
    68 0000008B C3                      ret
    69                                  
    70                                  ;------------------------------------
    71                                  ; Ввод полярной координаты из файла
    72                                  ;------------------------------------
    73                                  global InPolar
    74                                  InPolar:
    75                                  section .data
    76 0000000C 25642564256400              .infmt db "%d%d%d",0
    77                                  section .bss
    78 00000020 <res 00000008>              .FILE   resq    1   ; временное хранение указателя на файл
    79 00000028 <res 00000008>              .pol    resq    1   ; адрес полярной коорддинаты
    80                                  section .text
    81 0000008C 55                      push rbp
    82 0000008D 4889E5                  mov rbp, rsp
    83                                  
    84                                      ; Сохранение принятых аргументов
    85 00000090 48893C25[28000000]          mov     [.pol], rdi           ; сохраняется адрес полярной координаты
    86 00000098 48893425[20000000]          mov     [.FILE], rsi          ; сохраняется указатель на файл
    87                                  
    88                                      ; Ввод полярной координаты из файла
    89 000000A0 488B3C25[20000000]          mov     rdi, [.FILE]
    90 000000A8 48BE-                       mov     rsi, .infmt         ; Формат - 1-й аргумент
    90 000000AA [0C00000000000000] 
    91 000000B2 488B1425[28000000]          mov     rdx, [.pol]         ; &r
    92 000000BA 488B0C25[28000000]          mov     rcx, [.pol]
    93 000000C2 4883C104                    add     rcx, 4              ; &phi = &r + 4
    94 000000C6 B800000000                  mov     rax, 0              ; нет чисел с плавающей точкой
    95 000000CB E8(00000000)                call    fscanf
    96                                  
    97 000000D0 C9                      leave
    98 000000D1 C3                      ret
    99                                  
   100                                  ;----------------------------------------------
   101                                  ; Ввод параметров обобщенного числа из файла
   102                                  ;----------------------------------------------
   103                                  global InNumber
   104                                  InNumber:
   105                                  section .data
   106 00000013 256400                      .tagFormat   db      "%d",0
   107 00000016 5461672069733A2025-         .tagOutFmt   db      "Tag is: %d",10,0
   107 0000001F 640A00             
   108                                  section .bss
   109 00000030 <res 00000008>              .FILE       resq    1   ; временное хранение указателя на файл
   110 00000038 <res 00000008>              .pnum       resq    1   ; адрес числа
   111 00000040 <res 00000004>              .numTag     resd    1   ; признак числа
   112                                  section .text
   113 000000D2 55                      push rbp
   114 000000D3 4889E5                  mov rbp, rsp
   115                                  
   116                                      ; Сохранение принятых аргументов
   117 000000D6 48893C25[38000000]          mov     [.pnum], rdi            ; сохраняется адрес числа
   118 000000DE 48893425[30000000]          mov     [.FILE], rsi            ; сохраняется указатель на файл
   119                                  
   120                                      ; чтение признака числа и его обработка
   121 000000E6 488B3C25[30000000]          mov     rdi, [.FILE]
   122 000000EE 48BE-                       mov     rsi, .tagFormat
   122 000000F0 [1300000000000000] 
   123 000000F8 488B1425[38000000]          mov     rdx, [.pnum]        ; адрес начала числа (ее признак)
   124 00000100 4831C0                      xor     rax, rax            ; нет чисел с плавающей точкой
   125 00000103 E8(00000000)                call    fscanf
   126                                  
   127                                      ; Тестовый вывод признака фигуры
   128                                  ;     mov     rdi, .tagOutFmt
   129                                  ;     mov     rax, [.pshape]
   130                                  ;     mov     esi, [rax]
   131                                  ;     call    printf
   132                                  
   133 00000108 488B0C25[38000000]          mov rcx, [.pnum]            ; загрузка адреса начала числа
   134 00000110 8B01                        mov eax, [rcx]              ; и получение прочитанного признака
   135 00000112 3B0425[00000000]            cmp eax, [COMPLEX]
   136 00000119 741B                        je .compIn
   137 0000011B 3B0425[00000000]            cmp eax, [FRACTION]
   138 00000122 7432                        je .fracIn
   139 00000124 3B0425[00000000]            cmp eax, [POLAR]
   140 0000012B 7449                        je .polIn
   141 0000012D 83F800                      cmp eax, 0
   142 00000130 7462                        je .EOF
   143 00000132 31C0                        xor eax, eax                ; Некорректный признак - обнуление кода возврата
   144 00000134 EB65                        jmp     .return
   145                                  .compIn:
   146                                      ; Ввод комплексного числа
   147 00000136 488B3C25[38000000]          mov     rdi, [.pnum]
   148 0000013E 4883C704                    add     rdi, 4
   149 00000142 488B3425[30000000]          mov     rsi, [.FILE]
   150 0000014A E8B1FEFFFF                  call    InComplex
   151 0000014F B801000000                  mov     rax, 1  ; Код возврата - true
   152 00000154 EB45                        jmp     .return
   153                                  .fracIn:
   154                                      ; Ввод дроби
   155 00000156 488B3C25[38000000]          mov     rdi, [.pnum]
   156 0000015E 4883C704                    add     rdi, 4
   157 00000162 488B3425[30000000]          mov     rsi, [.FILE]
   158 0000016A E8D7FEFFFF                  call    InFraction
   159 0000016F B801000000                  mov     rax, 1  ; Код возврата - true
   160 00000174 EB25                        jmp     .return
   161                                  .polIn:
   162                                      ; Ввод полярной координаты
   163 00000176 488B3C25[38000000]          mov     rdi, [.pnum]
   164 0000017E 4883C704                    add     rdi, 4
   165 00000182 488B3425[30000000]          mov     rsi, [.FILE]
   166 0000018A E8FDFEFFFF                  call    InPolar
   167 0000018F B801000000                  mov     rax, 1  ; Код возврата - true
   168                                  .EOF:
   169 00000194 B804000000                  mov rax, 4
   170 00000199 EB00                        jmp .return
   171                                  .return:
   172                                  
   173 0000019B C9                      leave
   174 0000019C C3                      ret
   175                                  
   176                                  ;----------------------------------------------------
   177                                  ; Ввод содержимого контейнера из указанного файла
   178                                  ;----------------------------------------------------
   179                                  global InContainer
   180                                  InContainer:
   181                                  section .data
   182 00000022 496E636F7272656374-         .errorNum db  "Incorrect number key. Input process will be interrupted.",10,0
   182 0000002B 206E756D626572206B-
   182 00000034 65792E20496E707574-
   182 0000003D 2070726F6365737320-
   182 00000046 77696C6C2062652069-
   182 0000004F 6E7465727275707465-
   182 00000058 642E0A00           
   183                                  section .bss
   184 00000044 <res 00000008>              .pcont  resq    1   ; адрес контейнера
   185 0000004C <res 00000008>              .plen   resq    1   ; адрес для сохранения числа введенных элементов
   186 00000054 <res 00000008>              .FILE   resq    1   ; указатель на файл
   187                                  section .text
   188 0000019D 55                      push rbp
   189 0000019E 4889E5                  mov rbp, rsp
   190                                  
   191 000001A1 48893C25[44000000]          mov [.pcont], rdi   ; сохраняется указатель на контейнер
   192 000001A9 48893425[4C000000]          mov [.plen], rsi    ; сохраняется указатель на длину
   193 000001B1 48891425[54000000]          mov [.FILE], rdx    ; сохраняется указатель на файл
   194                                      ; В rdi адрес начала контейнера
   195 000001B9 4831DB                      xor rbx, rbx        ; число чисел = 0
   196 000001BC 4889D6                      mov rsi, rdx        ; перенос указателя на файл
   197                                  .loop:
   198                                  
   199 000001BF 4881FB11270000              cmp rbx, 10001
   200 000001C6 7D3C                        jge .return
   201                                  
   202                                      ; сохранение рабочих регистров
   203 000001C8 57                          push rdi
   204 000001C9 53                          push rbx
   205                                  
   206 000001CA 488B3425[54000000]          mov     rsi, [.FILE]
   207 000001D2 B800000000                  mov     rax, 0      ; нет чисел с плавающей точкой
   208 000001D7 E8F6FEFFFF                  call    InNumber    ; ввод числа
   209 000001DC 83F800                      cmp eax, 0
   210 000001DF 7E12                        jle .printErr
   211 000001E1 83F804                      cmp eax, 4
   212 000001E4 741E                        je .return
   213                                  
   214                                      ;cmp rax, 0          ; проверка успешности ввода
   215                                      ;jle  .return        ; выход, если признак меньше или равен 0
   216                                  
   217 000001E6 5B                          pop rbx
   218 000001E7 5F                          pop rdi
   219 000001E8 48FFC3                      inc rbx
   220                                  
   221 000001EB 4883C720                    add rdi, 32            ; адрес следующего числа
   222                                  
   223 000001EF EBCE                        jmp .loop
   224 000001F1 EB11                        jmp .return
   225                                  
   226                                  .printErr:
   227 000001F3 48BF-                       mov rdi, .errorNum
   227 000001F5 [2200000000000000] 
   228 000001FD E8(00000000)                call printf
   229 00000202 EB00                        jmp .return
   230                                  .return:
   231 00000204 488B0425[4C000000]          mov rax, [.plen]    ; перенос указателя на длину
   232 0000020C 8918                        mov [rax], ebx      ; занесение длины
   233 0000020E C9                      leave
   234 0000020F C3                      ret
   235                                  
