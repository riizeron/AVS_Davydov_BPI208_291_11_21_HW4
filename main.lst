     1                                  ;------------------------------------------------------------------------------
     2                                  ; main.asm - содержит главную функцию,
     3                                  ; обеспечивающую простое тестирование
     4                                  ;------------------------------------------------------------------------------
     5                                  ; main.asm
     6                                  
     7                                  global  COMPLEX
     8                                  global  FRACTION
     9                                  global  POLAR
    10                                  
    11                                  extern InRndContainer
    12                                  extern DeleteContainerElements
    13                                  extern ContainerRealAverage
    14                                  
    15                                  %include "macros.mac"
     1                              <1> ; macros.mac - файл с макроопределениями
     2                              <1> 
     3                              <1> extern  fopen
     4                              <1> extern  fscanf
     5                              <1> extern  fclose
     6                              <1> extern  fprintf
     7                              <1> extern  printf
     8                              <1> extern  stdout
     9                              <1> extern  time
    10                              <1> extern  srand
    11                              <1> extern  strcmp
    12                              <1> extern  atoi
    13                              <1> extern  clock
    14                              <1> 
    15                              <1> extern  InContainer
    16                              <1> extern  InRndContainer
    17                              <1> extern  OutContainer
    18                              <1> extern  ContainerRealAverage
    19                              <1> 
    20                              <1> ;-------------------------------------------------------------
    21                              <1> ; Вывод строки символов из буфера
    22                              <1> %macro	PrintStrBuf 2
    23                              <1>         mov rdi, %2
    24                              <1>         mov rsi, %1
    25                              <1>         xor rax, rax
    26                              <1>         call fprintf
    27                              <1> %endmacro
    28                              <1> 
    29                              <1> ;-------------------------------------------------------------
    30                              <1> ; Вывод строки, передаваемой непосредственно макросу
    31                              <1> %macro  PrintStr    2
    32                              <1>     section .data
    33                              <1>         %%arg1  db  %1,0        ; first argument
    34                              <1>     section .text               ; the printf arguments
    35                              <1>         mov rdi, %2
    36                              <1>         mov rsi, %%arg1
    37                              <1>         mov rax, 0              ; no floating point
    38                              <1>         call fprintf
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> ;-------------------------------------------------------------
    42                              <1> ; Вывод строки, передаваемой непосредственно макросу
    43                              <1> ; с переводом на следующую строку
    44                              <1> %macro  PrintStrLn    2
    45                              <1>     section .data
    46                              <1>         %%arg1  db  %1,10,0     ; first argument
    47                              <1>     section .text               ; the printf arguments
    48                              <1>         mov rdi, %2
    49                              <1>         mov rsi, %%arg1
    50                              <1>         mov rax, 0              ; no floating point
    51                              <1>         call fprintf
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> ;-------------------------------------------------------------
    55                              <1> ; Вывод целого числа
    56                              <1> %macro  PrintInt    2
    57                              <1>     section .data
    58                              <1>         %%arg1  db  "%d",0     ; first argument
    59                              <1>     section .text               ; the printf arguments
    60                              <1>         mov rdi, %2
    61                              <1>         mov rsi, %%arg1
    62                              <1>         mov rdx, %1
    63                              <1>         mov rax, 0              ; no floating point
    64                              <1>         call fprintf
    65                              <1> %endmacro
    66                              <1> 
    67                              <1> ;-------------------------------------------------------------
    68                              <1> ; Вывод 64-разрядного беззнакового целого числа
    69                              <1> %macro  PrintLLUns    2
    70                              <1>     section .data
    71                              <1>         %%arg1  db  "%llu",0     ; first argument
    72                              <1>     section .text               ; the printf arguments
    73                              <1>         mov rdi, %2
    74                              <1>         mov rsi, %%arg1
    75                              <1>         mov rdx, %1
    76                              <1>         mov rax, 0              ; no floating point
    77                              <1>         call fprintf
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> ;-------------------------------------------------------------
    81                              <1> ; Вывод действительного числа двойной точности
    82                              <1> %macro  PrintDouble    2
    83                              <1>     section .data
    84                              <1>         %%arg1  db  "%lg",0     ; first argument
    85                              <1>     section .text               ; the printf arguments
    86                              <1>         mov rdi, %2
    87                              <1>         mov rsi, %%arg1
    88                              <1>         movsd xmm0, %1
    89                              <1>         mov rax, 1              ; no floating point
    90                              <1>         call fprintf
    91                              <1> %endmacro
    92                              <1> 
    93                              <1> ;-------------------------------------------------------------
    94                              <1> ; Вывод содержимого контейнера
    95                              <1> %macro  PrintContainer    3
    96                              <1>     mov     rdi, %1
    97                              <1>     mov     esi, %2
    98                              <1>     mov     rdx, %3
    99                              <1>     mov     rax, 1              ; нет чисел с плавающей точкой
   100                              <1>     call    OutContainer
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;-------------------------------------------------------------
   104                              <1> ; Вычисление суммы вещественных значений чисел в контейнере
   105                              <1> %macro  AverageReal    3
   106                              <1>     mov     rdi, %1
   107                              <1>     mov     rsi, %2
   108                              <1>     call    ContainerRealAverage
   109                              <1>     movsd   %3, xmm0
   110                              <1> %endmacro
   111                              <1> 
   112                              <1> ;-------------------------------------------------------------
   113                              <1> ; Удаление чисел контейнера
   114                              <1> %macro  DeleteContainerNumbers    3
   115                              <1>     mov     rdi, %1
   116                              <1>     mov     rsi, %2
   117                              <1>     movsd   xmm0, %3
   118                              <1>     call    DeleteContainerElements
   119                              <1> %endmacro
   120                              <1> 
   121                              <1> ;-------------------------------------------------------------
   122                              <1> ; Открытие файла для чтения, записи
   123                              <1> %macro  FileOpen   3
   124                              <1>     section .data
   125                              <1>         %%rw  db  %2,0          ; признак доступа
   126                              <1>     section .text               ; the printf arguments
   127                              <1>         mov     rdi, %1         ; адрес строки открываемого файла
   128                              <1>         mov     rsi, %%rw       ; строка определяющая чтение-запись. Задается явно
   129                              <1>         ; Или аналог:
   130                              <1>         ;lea     rsi, [%%rw]    ; строка определяющая чтение-запись. Задается явно
   131                              <1>         mov     rax, 0          ; нет чисел с плавающей точкой
   132                              <1>         call    fopen
   133                              <1>         mov     [%3], rax
   134                              <1> %endmacro
   135                              <1> 
   136                              <1> ;-------------------------------------------------------------
   137                              <1> ; Закрытие открытого файла
   138                              <1> %macro  FileClose   1
   139                              <1>     mov     rdi, %1             ; передача указателя на закрываемый файл
   140                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   141                              <1>     call    fclose
   142                              <1> %endmacro
   143                              <1> 
    16                                  
    17                                  section .data
    18 00000000 01000000                    COMPLEX     dd  1
    19 00000004 02000000                    FRACTION    dd  2
    20 00000008 03000000                    POLAR       dd  3
    21 0000000C 000000000000F03F            oneDouble   dq  1.0
    22 00000014 496E636F7272656374-         erMsg1  db "Incorrect number of arguments = %d: ",10,0
    22 0000001D 206E756D626572206F-
    22 00000026 6620617267756D656E-
    22 0000002F 7473203D2025643A20-
    22 00000038 0A00               
    23 0000003A 2D6E00                      rndGen  db "-n",0
    24 0000003D 2D6600                      fileGen  db "-f",0
    25 00000040 696E636F7272656374-         errMessage1 db  "incorrect command line!", 10,"  Waited:",10
    25 00000049 20636F6D6D616E6420-
    25 00000052 6C696E65210A202057-
    25 0000005B 61697465643A0A     
    26 00000062 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    26 0000006B 616E64202D6620696E-
    26 00000074 66696C65206F757466-
    26 0000007D 696C653031206F7574-
    26 00000086 66696C6530320A2020-
    26 0000008F 4F723A0A           
    27 00000093 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    27 0000009C 616E64202D6E206E75-
    27 000000A5 6D626572206F757466-
    27 000000AE 696C653031206F7574-
    27 000000B7 66696C6530320A00   
    28 000000BF 696E636F7272656374-         errMessage2 db  "incorrect qualifier value!", 10,"  Waited:",10
    28 000000C8 207175616C69666965-
    28 000000D1 722076616C7565210A-
    28 000000DA 20205761697465643A-
    28 000000E3 0A                 
    29 000000E4 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    29 000000ED 616E64202D6620696E-
    29 000000F6 66696C65206F757466-
    29 000000FF 696C653031206F7574-
    29 00000108 66696C6530320A2020-
    29 00000111 4F723A0A           
    30 00000115 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    30 0000011E 616E64202D6E206E75-
    30 00000127 6D626572206F757466-
    30 00000130 696C653031206F7574-
    30 00000139 66696C6530320A00   
    31 00000141 00000000                    len         dd  0           ; Количество элементов в массиве
    32                                  section .bss
    33 00000000 <res 00000004>              argc        resd    1
    34 00000004 <res 00000004>              num         resd    1
    35 00000008 <res 00000008>              averageReal         resq    1
    36 00000010 <res 00000008>              start       resq    1       ; начало отсчета времени
    37 00000018 <res 00000008>              delta       resq    1       ; интервал отсчета времени
    38 00000020 <res 00000010>              startTime   resq    2       ; начало отсчета времени
    39 00000030 <res 00000010>              endTime     resq    2       ; конец отсчета времени
    40 00000040 <res 00000010>              deltaTime   resq    2       ; интервал отсчета времени
    41 00000050 <res 00000008>              ifst        resq    1       ; указатель на файл, открываемый файл для чтения чисел
    42 00000058 <res 00000008>              ofst1       resq    1       ; указатель на файл, открываемый файл для записи контейнера
    43 00000060 <res 00000008>              ofst2       resq    1       ; указатель на файл, открываемый файл для записи вещественного значения
    44 00000068 <res 00027100>              cont        resb    160000  ; Массив используемый для хранения данных
    45                                  
    46                                  section .text
    47                                      global main
    48                                  main:
    49 00000000 55                      push rbp
    50 00000001 4889E5                  mov rbp,rsp
    51                                  
    52 00000004 893C25[00000000]            mov dword [argc], edi ;rdi contains number of arguments
    53 0000000B 4989FC                      mov r12, rdi ;rdi contains number of arguments
    54 0000000E 4989F5                      mov r13, rsi ;rsi contains the address to the array of arguments
    55                                  
    56                                  .printArguments:
    57                                      PrintStrLn "The command and arguments:", [stdout]
    57                              <1>  section .data
    57 00000145 54686520636F6D6D61- <1>  %%arg1 db %1,10,0
    57 0000014E 6E6420616E64206172- <1>
    57 00000157 67756D656E74733A0A- <1>
    57 00000160 00                  <1>
    57                              <1>  section .text
    57 00000011 488B3C25[00000000]  <1>  mov rdi, %2
    57 00000019 48BE-               <1>  mov rsi, %%arg1
    57 0000001B [4501000000000000]  <1>
    57 00000023 B800000000          <1>  mov rax, 0
    57 00000028 E8(00000000)        <1>  call fprintf
    58 0000002D BB00000000                  mov rbx, 0
    59                                  .printLoop:
    60                                      PrintStrBuf qword [r13+rbx*8], [stdout]
    60 00000032 488B3C25[00000000]  <1>  mov rdi, %2
    60 0000003A 498B74DD00          <1>  mov rsi, %1
    60 0000003F 4831C0              <1>  xor rax, rax
    60 00000042 E8(00000000)        <1>  call fprintf
    61                                      PrintStr    10, [stdout]
    61                              <1>  section .data
    61 00000161 0A00                <1>  %%arg1 db %1,0
    61                              <1>  section .text
    61 00000047 488B3C25[00000000]  <1>  mov rdi, %2
    61 0000004F 48BE-               <1>  mov rsi, %%arg1
    61 00000051 [6101000000000000]  <1>
    61 00000059 B800000000          <1>  mov rax, 0
    61 0000005E E8(00000000)        <1>  call fprintf
    62 00000063 48FFC3                      inc rbx
    63 00000066 4C39E3                      cmp rbx, r12
    64 00000069 7CC7                        jl .printLoop
    65                                  
    66                                      PrintStrLn  "", [stdout]
    66                              <1>  section .data
    66 00000163 0A00                <1>  %%arg1 db %1,10,0
    66                              <1>  section .text
    66 0000006B 488B3C25[00000000]  <1>  mov rdi, %2
    66 00000073 48BE-               <1>  mov rsi, %%arg1
    66 00000075 [6301000000000000]  <1>
    66 0000007D B800000000          <1>  mov rax, 0
    66 00000082 E8(00000000)        <1>  call fprintf
    67                                  
    68 00000087 4983FC05                    cmp r12, 5      ; проверка количества аргументов
    69 0000008B 741F                        je .start
    70                                      PrintStrBuf errMessage1, [stdout]
    70 0000008D 488B3C25[00000000]  <1>  mov rdi, %2
    70 00000095 48BE-               <1>  mov rsi, %1
    70 00000097 [4000000000000000]  <1>
    70 0000009F 4831C0              <1>  xor rax, rax
    70 000000A2 E8(00000000)        <1>  call fprintf
    71 000000A7 E9F0060000                  jmp .return
    72                                  .start:
    73                                      ; время начала
    74 000000AC B8E4000000                  mov rax, 228
    75 000000B1 31FF                        xor edi, edi
    76 000000B3 488D3425[20000000]          lea rsi, [startTime]
    77 000000BB 0F05                        syscall
    78                                  
    79                                      
    80                                      PrintStrLn "Start", [stdout]
    80                              <1>  section .data
    80 00000165 53746172740A00      <1>  %%arg1 db %1,10,0
    80                              <1>  section .text
    80 000000BD 488B3C25[00000000]  <1>  mov rdi, %2
    80 000000C5 48BE-               <1>  mov rsi, %%arg1
    80 000000C7 [6501000000000000]  <1>
    80 000000CF B800000000          <1>  mov rax, 0
    80 000000D4 E8(00000000)        <1>  call fprintf
    81                                      ; Проверка второго аргумента
    82 000000D9 48BF-                       mov rdi, rndGen     ; признак для сравнения
    82 000000DB [3A00000000000000] 
    83 000000E3 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    84 000000E7 E8(00000000)                call strcmp
    85 000000EC 4883F800                    cmp rax, 0
    86 000000F0 743C                        je .next2
    87 000000F2 48BF-                       mov rdi, fileGen
    87 000000F4 [3D00000000000000] 
    88 000000FC 498B7508                    mov rsi, [r13+8]
    89 00000100 E8(00000000)                call strcmp
    90 00000105 4883F800                    cmp rax, 0
    91 00000109 0F8482000000                je .next3
    92                                      PrintStrBuf errMessage2, [stdout]
    92 0000010F 488B3C25[00000000]  <1>  mov rdi, %2
    92 00000117 48BE-               <1>  mov rsi, %1
    92 00000119 [BF00000000000000]  <1>
    92 00000121 4831C0              <1>  xor rax, rax
    92 00000124 E8(00000000)        <1>  call fprintf
    93 00000129 E96E060000                  jmp .return
    94                                      
    95                                  .next2:
    96                                      ; Генерация случайных чисел
    97 0000012E 498B7D10                    mov rdi, [r13+16]
    98 00000132 E8(00000000)                call atoi
    99 00000137 890425[04000000]            mov [num], eax
   100 0000013E 8B0425[04000000]            mov eax, [num]
   101 00000145 83F801                      cmp eax, 1
   102 00000148 0F8CF2050000                jl .fall1
   103 0000014E 3D10270000                  cmp eax, 10000
   104 00000153 0F8FE7050000                jg .fall1
   105                                  
   106                                      ; Начальная установка генератора случайных чисел
   107 00000159 4831FF                      xor     rdi, rdi
   108 0000015C 4831C0                      xor     rax, rax
   109 0000015F E8(00000000)                call    time
   110 00000164 4889C7                      mov     rdi, rax
   111 00000167 4831C0                      xor     rax, rax
   112 0000016A E8(00000000)                call    srand
   113                                      ; Заполнение контейнера случайными фигурами
   114 0000016F 48BF-                       mov     rdi, cont   ; передача адреса контейнера
   114 00000171 [6800000000000000] 
   115 00000179 48BE-                       mov     rsi, len    ; передача адреса для длины
   115 0000017B [4101000000000000] 
   116 00000183 8B1425[04000000]            mov     edx, [num]  ; передача количества порождаемых фигур
   117 0000018A E8(00000000)                call    InRndContainer
   118 0000018F EB58                        jmp     .checkLen
   119                                  
   120                                  .next3:
   121                                      ; Получение чисел из файла
   122                                      FileOpen [r13+16], "r", ifst
   122                              <1>  section .data
   122 0000016C 7200                <1>  %%rw db %2,0
   122                              <1>  section .text
   122 00000191 498B7D10            <1>  mov rdi, %1
   122 00000195 48BE-               <1>  mov rsi, %%rw
   122 00000197 [6C01000000000000]  <1>
   122                              <1> 
   122                              <1> 
   122 0000019F B800000000          <1>  mov rax, 0
   122 000001A4 E8(00000000)        <1>  call fopen
   122 000001A9 48890425[50000000]  <1>  mov [%3], rax
   123                                      ; Заполнение контейнера числами из файла
   124 000001B1 48BF-                       mov     rdi, cont           ; адрес контейнера
   124 000001B3 [6800000000000000] 
   125 000001BB 48BE-                       mov     rsi, len            ; адрес для установки числа элементов
   125 000001BD [4101000000000000] 
   126 000001C5 488B1425[50000000]          mov     rdx, [ifst]         ; указатель на файл
   127 000001CD 4831C0                      xor     rax, rax
   128 000001D0 E8(00000000)                call    InContainer         ; ввод данных в контейнер
   129                                      FileClose [ifst]
   129 000001D5 488B3C25[50000000]  <1>  mov rdi, %1
   129 000001DD B800000000          <1>  mov rax, 0
   129 000001E2 E8(00000000)        <1>  call fclose
   130 000001E7 EB00                        jmp .checkLen
   131                                  
   132                                  .checkLen:
   133 000001E9 8B0425[41010000]            mov     eax, [len]
   134 000001F0 83F801                      cmp     eax, 1
   135 000001F3 0F8C47050000                jl      .fall1
   136 000001F9 3D10270000                  cmp     eax, 10000
   137 000001FE 0F8F3C050000                jg      .fall1
   138 00000204 EB00                        jmp     .task2
   139                                  
   140                                  .task2:
   141                                      AverageReal cont, [len], [averageReal]
   141 00000206 48BF-               <1>  mov rdi, %1
   141 00000208 [6800000000000000]  <1>
   141 00000210 488B3425[41010000]  <1>  mov rsi, %2
   141 00000218 E8(00000000)        <1>  call ContainerRealAverage
   141 0000021D F20F110425-         <1>  movsd %3, xmm0
   141 00000222 [08000000]          <1>
   142                                      ; Вывод содержимого контейнера
   143                                      PrintStrLn "Filled container:", [stdout]
   143                              <1>  section .data
   143 0000016E 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   143 00000177 6E7461696E65723A0A- <1>
   143 00000180 00                  <1>
   143                              <1>  section .text
   143 00000226 488B3C25[00000000]  <1>  mov rdi, %2
   143 0000022E 48BE-               <1>  mov rsi, %%arg1
   143 00000230 [6E01000000000000]  <1>
   143 00000238 B800000000          <1>  mov rax, 0
   143 0000023D E8(00000000)        <1>  call fprintf
   144                                      PrintContainer cont, [len], [stdout]
   144 00000242 48BF-               <1>  mov rdi, %1
   144 00000244 [6800000000000000]  <1>
   144 0000024C 8B3425[41010000]    <1>  mov esi, %2
   144 00000253 488B1425[00000000]  <1>  mov rdx, %3
   144 0000025B B801000000          <1>  mov rax, 1
   144 00000260 E8(00000000)        <1>  call OutContainer
   145                                      PrintStrLn "", [stdout]
   145                              <1>  section .data
   145 00000181 0A00                <1>  %%arg1 db %1,10,0
   145                              <1>  section .text
   145 00000265 488B3C25[00000000]  <1>  mov rdi, %2
   145 0000026D 48BE-               <1>  mov rsi, %%arg1
   145 0000026F [8101000000000000]  <1>
   145 00000277 B800000000          <1>  mov rax, 0
   145 0000027C E8(00000000)        <1>  call fprintf
   146                                      PrintStr    "Average real = ", [stdout]
   146                              <1>  section .data
   146 00000183 417665726167652072- <1>  %%arg1 db %1,0
   146 0000018C 65616C203D2000      <1>
   146                              <1>  section .text
   146 00000281 488B3C25[00000000]  <1>  mov rdi, %2
   146 00000289 48BE-               <1>  mov rsi, %%arg1
   146 0000028B [8301000000000000]  <1>
   146 00000293 B800000000          <1>  mov rax, 0
   146 00000298 E8(00000000)        <1>  call fprintf
   147                                      PrintDouble [averageReal], [stdout]
   147                              <1>  section .data
   147 00000193 256C6700            <1>  %%arg1 db "%lg",0
   147                              <1>  section .text
   147 0000029D 488B3C25[00000000]  <1>  mov rdi, %2
   147 000002A5 48BE-               <1>  mov rsi, %%arg1
   147 000002A7 [9301000000000000]  <1>
   147 000002AF F20F100425-         <1>  movsd xmm0, %1
   147 000002B4 [08000000]          <1>
   147 000002B8 B801000000          <1>  mov rax, 1
   147 000002BD E8(00000000)        <1>  call fprintf
   148                                  
   149                                      FileOpen [r13+24], "w", ofst1
   149                              <1>  section .data
   149 00000197 7700                <1>  %%rw db %2,0
   149                              <1>  section .text
   149 000002C2 498B7D18            <1>  mov rdi, %1
   149 000002C6 48BE-               <1>  mov rsi, %%rw
   149 000002C8 [9701000000000000]  <1>
   149                              <1> 
   149                              <1> 
   149 000002D0 B800000000          <1>  mov rax, 0
   149 000002D5 E8(00000000)        <1>  call fopen
   149 000002DA 48890425[58000000]  <1>  mov [%3], rax
   150                                      PrintStrLn "Filled container:", [ofst1]
   150                              <1>  section .data
   150 00000199 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   150 000001A2 6E7461696E65723A0A- <1>
   150 000001AB 00                  <1>
   150                              <1>  section .text
   150 000002E2 488B3C25[58000000]  <1>  mov rdi, %2
   150 000002EA 48BE-               <1>  mov rsi, %%arg1
   150 000002EC [9901000000000000]  <1>
   150 000002F4 B800000000          <1>  mov rax, 0
   150 000002F9 E8(00000000)        <1>  call fprintf
   151                                      PrintContainer cont, [len], [ofst1]
   151 000002FE 48BF-               <1>  mov rdi, %1
   151 00000300 [6800000000000000]  <1>
   151 00000308 8B3425[41010000]    <1>  mov esi, %2
   151 0000030F 488B1425[58000000]  <1>  mov rdx, %3
   151 00000317 B801000000          <1>  mov rax, 1
   151 0000031C E8(00000000)        <1>  call OutContainer
   152                                      PrintStrLn "", [ofst1]
   152                              <1>  section .data
   152 000001AC 0A00                <1>  %%arg1 db %1,10,0
   152                              <1>  section .text
   152 00000321 488B3C25[58000000]  <1>  mov rdi, %2
   152 00000329 48BE-               <1>  mov rsi, %%arg1
   152 0000032B [AC01000000000000]  <1>
   152 00000333 B800000000          <1>  mov rax, 0
   152 00000338 E8(00000000)        <1>  call fprintf
   153                                      PrintStr    "Average real = ", [ofst1]
   153                              <1>  section .data
   153 000001AE 417665726167652072- <1>  %%arg1 db %1,0
   153 000001B7 65616C203D2000      <1>
   153                              <1>  section .text
   153 0000033D 488B3C25[58000000]  <1>  mov rdi, %2
   153 00000345 48BE-               <1>  mov rsi, %%arg1
   153 00000347 [AE01000000000000]  <1>
   153 0000034F B800000000          <1>  mov rax, 0
   153 00000354 E8(00000000)        <1>  call fprintf
   154                                      PrintDouble [averageReal], [ofst1]
   154                              <1>  section .data
   154 000001BE 256C6700            <1>  %%arg1 db "%lg",0
   154                              <1>  section .text
   154 00000359 488B3C25[58000000]  <1>  mov rdi, %2
   154 00000361 48BE-               <1>  mov rsi, %%arg1
   154 00000363 [BE01000000000000]  <1>
   154 0000036B F20F100425-         <1>  movsd xmm0, %1
   154 00000370 [08000000]          <1>
   154 00000374 B801000000          <1>  mov rax, 1
   154 00000379 E8(00000000)        <1>  call fprintf
   155                                      FileClose [ofst1]
   155 0000037E 488B3C25[58000000]  <1>  mov rdi, %1
   155 00000386 B800000000          <1>  mov rax, 0
   155 0000038B E8(00000000)        <1>  call fclose
   156                                  
   157                                  .deleteElemsFromCont:
   158                                      
   159                                      DeleteContainerNumbers cont, [len], [averageReal]
   159 00000390 48BF-               <1>  mov rdi, %1
   159 00000392 [6800000000000000]  <1>
   159 0000039A 488B3425[41010000]  <1>  mov rsi, %2
   159 000003A2 F20F100425-         <1>  movsd xmm0, %3
   159 000003A7 [08000000]          <1>
   159 000003AB E8(00000000)        <1>  call DeleteContainerElements
   160 000003B0 48893425[41010000]          mov [len], rsi
   161                                  
   162                                      ; Вычисление времени завершения
   163 000003B8 B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   164 000003BD 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   165 000003BF 488D3425[30000000]          lea rsi, [endTime]
   166 000003C7 0F05                        syscall        ; [time] contains number of seconds
   167                                                     ; [time + 8] contains number of nanoseconds
   168                                  
   169                                  
   170                                      
   171                                      ; Получение времени работы
   172 000003C9 488B0425[30000000]          mov rax, [endTime]
   173 000003D1 482B0425[20000000]          sub rax, [startTime]
   174 000003D9 488B1C25[38000000]          mov rbx, [endTime+8]
   175 000003E1 488B0C25[28000000]          mov rcx, [startTime+8]
   176 000003E9 4839CB                      cmp rbx, rcx
   177 000003EC 7D0A                        jge .subNanoOnly
   178                                      ; иначе занимаем секунду
   179 000003EE 48FFC8                      dec rax
   180 000003F1 4881C300CA9A3B              add rbx, 1000000000
   181                                  .subNanoOnly:
   182 000003F8 482B1C25[28000000]          sub rbx, [startTime+8]
   183 00000400 48890425[40000000]          mov [deltaTime], rax
   184 00000408 48891C25[48000000]          mov [deltaTime+8], rbx
   185                                  
   186                                      ; Вывод вещественного значения нескольких чисел
   187                                      PrintStrLn  "", [stdout]
   187                              <1>  section .data
   187 000001C2 0A00                <1>  %%arg1 db %1,10,0
   187                              <1>  section .text
   187 00000410 488B3C25[00000000]  <1>  mov rdi, %2
   187 00000418 48BE-               <1>  mov rsi, %%arg1
   187 0000041A [C201000000000000]  <1>
   187 00000422 B800000000          <1>  mov rax, 0
   187 00000427 E8(00000000)        <1>  call fprintf
   188                                      PrintStrLn  "Container after deleting numbers:", [stdout]
   188                              <1>  section .data
   188 000001C4 436F6E7461696E6572- <1>  %%arg1 db %1,10,0
   188 000001CD 206166746572206465- <1>
   188 000001D6 6C6574696E67206E75- <1>
   188 000001DF 6D626572733A0A00    <1>
   188                              <1>  section .text
   188 0000042C 488B3C25[00000000]  <1>  mov rdi, %2
   188 00000434 48BE-               <1>  mov rsi, %%arg1
   188 00000436 [C401000000000000]  <1>
   188 0000043E B800000000          <1>  mov rax, 0
   188 00000443 E8(00000000)        <1>  call fprintf
   189                                      PrintContainer cont, [len], [stdout]
   189 00000448 48BF-               <1>  mov rdi, %1
   189 0000044A [6800000000000000]  <1>
   189 00000452 8B3425[41010000]    <1>  mov esi, %2
   189 00000459 488B1425[00000000]  <1>  mov rdx, %3
   189 00000461 B801000000          <1>  mov rax, 1
   189 00000466 E8(00000000)        <1>  call OutContainer
   190                                      PrintStrLn  "", [stdout]
   190                              <1>  section .data
   190 000001E7 0A00                <1>  %%arg1 db %1,10,0
   190                              <1>  section .text
   190 0000046B 488B3C25[00000000]  <1>  mov rdi, %2
   190 00000473 48BE-               <1>  mov rsi, %%arg1
   190 00000475 [E701000000000000]  <1>
   190 0000047D B800000000          <1>  mov rax, 0
   190 00000482 E8(00000000)        <1>  call fprintf
   191                                      PrintStr    "Average real = ", [stdout]
   191                              <1>  section .data
   191 000001E9 417665726167652072- <1>  %%arg1 db %1,0
   191 000001F2 65616C203D2000      <1>
   191                              <1>  section .text
   191 00000487 488B3C25[00000000]  <1>  mov rdi, %2
   191 0000048F 48BE-               <1>  mov rsi, %%arg1
   191 00000491 [E901000000000000]  <1>
   191 00000499 B800000000          <1>  mov rax, 0
   191 0000049E E8(00000000)        <1>  call fprintf
   192                                      PrintDouble [averageReal], [stdout]
   192                              <1>  section .data
   192 000001F9 256C6700            <1>  %%arg1 db "%lg",0
   192                              <1>  section .text
   192 000004A3 488B3C25[00000000]  <1>  mov rdi, %2
   192 000004AB 48BE-               <1>  mov rsi, %%arg1
   192 000004AD [F901000000000000]  <1>
   192 000004B5 F20F100425-         <1>  movsd xmm0, %1
   192 000004BA [08000000]          <1>
   192 000004BE B801000000          <1>  mov rax, 1
   192 000004C3 E8(00000000)        <1>  call fprintf
   193                                      PrintStrLn "", [stdout]
   193                              <1>  section .data
   193 000001FD 0A00                <1>  %%arg1 db %1,10,0
   193                              <1>  section .text
   193 000004C8 488B3C25[00000000]  <1>  mov rdi, %2
   193 000004D0 48BE-               <1>  mov rsi, %%arg1
   193 000004D2 [FD01000000000000]  <1>
   193 000004DA B800000000          <1>  mov rax, 0
   193 000004DF E8(00000000)        <1>  call fprintf
   194                                      PrintStr    ". Calculaton time = ", [stdout]
   194                              <1>  section .data
   194 000001FF 2E2043616C63756C61- <1>  %%arg1 db %1,0
   194 00000208 746F6E2074696D6520- <1>
   194 00000211 3D2000              <1>
   194                              <1>  section .text
   194 000004E4 488B3C25[00000000]  <1>  mov rdi, %2
   194 000004EC 48BE-               <1>  mov rsi, %%arg1
   194 000004EE [FF01000000000000]  <1>
   194 000004F6 B800000000          <1>  mov rax, 0
   194 000004FB E8(00000000)        <1>  call fprintf
   195                                      PrintLLUns  [deltaTime], [stdout]
   195                              <1>  section .data
   195 00000214 256C6C7500          <1>  %%arg1 db "%llu",0
   195                              <1>  section .text
   195 00000500 488B3C25[00000000]  <1>  mov rdi, %2
   195 00000508 48BE-               <1>  mov rsi, %%arg1
   195 0000050A [1402000000000000]  <1>
   195 00000512 488B1425[40000000]  <1>  mov rdx, %1
   195 0000051A B800000000          <1>  mov rax, 0
   195 0000051F E8(00000000)        <1>  call fprintf
   196                                      PrintStr    " sec, ", [stdout]
   196                              <1>  section .data
   196 00000219 207365632C2000      <1>  %%arg1 db %1,0
   196                              <1>  section .text
   196 00000524 488B3C25[00000000]  <1>  mov rdi, %2
   196 0000052C 48BE-               <1>  mov rsi, %%arg1
   196 0000052E [1902000000000000]  <1>
   196 00000536 B800000000          <1>  mov rax, 0
   196 0000053B E8(00000000)        <1>  call fprintf
   197                                      PrintLLUns  [deltaTime+8], [stdout]
   197                              <1>  section .data
   197 00000220 256C6C7500          <1>  %%arg1 db "%llu",0
   197                              <1>  section .text
   197 00000540 488B3C25[00000000]  <1>  mov rdi, %2
   197 00000548 48BE-               <1>  mov rsi, %%arg1
   197 0000054A [2002000000000000]  <1>
   197 00000552 488B1425[48000000]  <1>  mov rdx, %1
   197 0000055A B800000000          <1>  mov rax, 0
   197 0000055F E8(00000000)        <1>  call fprintf
   198                                      PrintStr    " nsec", [stdout]
   198                              <1>  section .data
   198 00000225 206E73656300        <1>  %%arg1 db %1,0
   198                              <1>  section .text
   198 00000564 488B3C25[00000000]  <1>  mov rdi, %2
   198 0000056C 48BE-               <1>  mov rsi, %%arg1
   198 0000056E [2502000000000000]  <1>
   198 00000576 B800000000          <1>  mov rax, 0
   198 0000057B E8(00000000)        <1>  call fprintf
   199                                      PrintStr    10, [stdout]
   199                              <1>  section .data
   199 0000022B 0A00                <1>  %%arg1 db %1,0
   199                              <1>  section .text
   199 00000580 488B3C25[00000000]  <1>  mov rdi, %2
   199 00000588 48BE-               <1>  mov rsi, %%arg1
   199 0000058A [2B02000000000000]  <1>
   199 00000592 B800000000          <1>  mov rax, 0
   199 00000597 E8(00000000)        <1>  call fprintf
   200                                  
   201                                      FileOpen    [r13+32], "w", ofst2
   201                              <1>  section .data
   201 0000022D 7700                <1>  %%rw db %2,0
   201                              <1>  section .text
   201 0000059C 498B7D20            <1>  mov rdi, %1
   201 000005A0 48BE-               <1>  mov rsi, %%rw
   201 000005A2 [2D02000000000000]  <1>
   201                              <1> 
   201                              <1> 
   201 000005AA B800000000          <1>  mov rax, 0
   201 000005AF E8(00000000)        <1>  call fopen
   201 000005B4 48890425[60000000]  <1>  mov [%3], rax
   202                                      PrintStrLn  "Container after deleting numbers:", [ofst2]
   202                              <1>  section .data
   202 0000022F 436F6E7461696E6572- <1>  %%arg1 db %1,10,0
   202 00000238 206166746572206465- <1>
   202 00000241 6C6574696E67206E75- <1>
   202 0000024A 6D626572733A0A00    <1>
   202                              <1>  section .text
   202 000005BC 488B3C25[60000000]  <1>  mov rdi, %2
   202 000005C4 48BE-               <1>  mov rsi, %%arg1
   202 000005C6 [2F02000000000000]  <1>
   202 000005CE B800000000          <1>  mov rax, 0
   202 000005D3 E8(00000000)        <1>  call fprintf
   203                                      PrintContainer cont, [len], [ofst2]
   203 000005D8 48BF-               <1>  mov rdi, %1
   203 000005DA [6800000000000000]  <1>
   203 000005E2 8B3425[41010000]    <1>  mov esi, %2
   203 000005E9 488B1425[60000000]  <1>  mov rdx, %3
   203 000005F1 B801000000          <1>  mov rax, 1
   203 000005F6 E8(00000000)        <1>  call OutContainer
   204                                      PrintStr    "Average real = ", [ofst2]
   204                              <1>  section .data
   204 00000252 417665726167652072- <1>  %%arg1 db %1,0
   204 0000025B 65616C203D2000      <1>
   204                              <1>  section .text
   204 000005FB 488B3C25[60000000]  <1>  mov rdi, %2
   204 00000603 48BE-               <1>  mov rsi, %%arg1
   204 00000605 [5202000000000000]  <1>
   204 0000060D B800000000          <1>  mov rax, 0
   204 00000612 E8(00000000)        <1>  call fprintf
   205                                      PrintDouble [averageReal], [ofst2]
   205                              <1>  section .data
   205 00000262 256C6700            <1>  %%arg1 db "%lg",0
   205                              <1>  section .text
   205 00000617 488B3C25[60000000]  <1>  mov rdi, %2
   205 0000061F 48BE-               <1>  mov rsi, %%arg1
   205 00000621 [6202000000000000]  <1>
   205 00000629 F20F100425-         <1>  movsd xmm0, %1
   205 0000062E [08000000]          <1>
   205 00000632 B801000000          <1>  mov rax, 1
   205 00000637 E8(00000000)        <1>  call fprintf
   206                                      PrintStrLn "", [ofst2]
   206                              <1>  section .data
   206 00000266 0A00                <1>  %%arg1 db %1,10,0
   206                              <1>  section .text
   206 0000063C 488B3C25[60000000]  <1>  mov rdi, %2
   206 00000644 48BE-               <1>  mov rsi, %%arg1
   206 00000646 [6602000000000000]  <1>
   206 0000064E B800000000          <1>  mov rax, 0
   206 00000653 E8(00000000)        <1>  call fprintf
   207                                      PrintStr    ". Calculaton time = ", [ofst2]
   207                              <1>  section .data
   207 00000268 2E2043616C63756C61- <1>  %%arg1 db %1,0
   207 00000271 746F6E2074696D6520- <1>
   207 0000027A 3D2000              <1>
   207                              <1>  section .text
   207 00000658 488B3C25[60000000]  <1>  mov rdi, %2
   207 00000660 48BE-               <1>  mov rsi, %%arg1
   207 00000662 [6802000000000000]  <1>
   207 0000066A B800000000          <1>  mov rax, 0
   207 0000066F E8(00000000)        <1>  call fprintf
   208                                      PrintLLUns  [deltaTime], [ofst2]
   208                              <1>  section .data
   208 0000027D 256C6C7500          <1>  %%arg1 db "%llu",0
   208                              <1>  section .text
   208 00000674 488B3C25[60000000]  <1>  mov rdi, %2
   208 0000067C 48BE-               <1>  mov rsi, %%arg1
   208 0000067E [7D02000000000000]  <1>
   208 00000686 488B1425[40000000]  <1>  mov rdx, %1
   208 0000068E B800000000          <1>  mov rax, 0
   208 00000693 E8(00000000)        <1>  call fprintf
   209                                      PrintStr    " sec, ", [ofst2]
   209                              <1>  section .data
   209 00000282 207365632C2000      <1>  %%arg1 db %1,0
   209                              <1>  section .text
   209 00000698 488B3C25[60000000]  <1>  mov rdi, %2
   209 000006A0 48BE-               <1>  mov rsi, %%arg1
   209 000006A2 [8202000000000000]  <1>
   209 000006AA B800000000          <1>  mov rax, 0
   209 000006AF E8(00000000)        <1>  call fprintf
   210                                      PrintLLUns  [deltaTime+8], [ofst2]
   210                              <1>  section .data
   210 00000289 256C6C7500          <1>  %%arg1 db "%llu",0
   210                              <1>  section .text
   210 000006B4 488B3C25[60000000]  <1>  mov rdi, %2
   210 000006BC 48BE-               <1>  mov rsi, %%arg1
   210 000006BE [8902000000000000]  <1>
   210 000006C6 488B1425[48000000]  <1>  mov rdx, %1
   210 000006CE B800000000          <1>  mov rax, 0
   210 000006D3 E8(00000000)        <1>  call fprintf
   211                                      PrintStr    " nsec", [ofst2]
   211                              <1>  section .data
   211 0000028E 206E73656300        <1>  %%arg1 db %1,0
   211                              <1>  section .text
   211 000006D8 488B3C25[60000000]  <1>  mov rdi, %2
   211 000006E0 48BE-               <1>  mov rsi, %%arg1
   211 000006E2 [8E02000000000000]  <1>
   211 000006EA B800000000          <1>  mov rax, 0
   211 000006EF E8(00000000)        <1>  call fprintf
   212                                      PrintStr    10, [ofst2]
   212                              <1>  section .data
   212 00000294 0A00                <1>  %%arg1 db %1,0
   212                              <1>  section .text
   212 000006F4 488B3C25[60000000]  <1>  mov rdi, %2
   212 000006FC 48BE-               <1>  mov rsi, %%arg1
   212 000006FE [9402000000000000]  <1>
   212 00000706 B800000000          <1>  mov rax, 0
   212 0000070B E8(00000000)        <1>  call fprintf
   213                                      FileClose   [ofst2]
   213 00000710 488B3C25[60000000]  <1>  mov rdi, %1
   213 00000718 B800000000          <1>  mov rax, 0
   213 0000071D E8(00000000)        <1>  call fclose
   214                                  
   215                                      PrintStrLn "Stop", [stdout]
   215                              <1>  section .data
   215 00000296 53746F700A00        <1>  %%arg1 db %1,10,0
   215                              <1>  section .text
   215 00000722 488B3C25[00000000]  <1>  mov rdi, %2
   215 0000072A 48BE-               <1>  mov rsi, %%arg1
   215 0000072C [9602000000000000]  <1>
   215 00000734 B800000000          <1>  mov rax, 0
   215 00000739 E8(00000000)        <1>  call fprintf
   216 0000073E EB5C                        jmp .return
   217                                  .fall1:
   218                                      PrintStr "incorrect numer of numbers = ", [stdout]
   218                              <1>  section .data
   218 0000029C 696E636F7272656374- <1>  %%arg1 db %1,0
   218 000002A5 206E756D6572206F66- <1>
   218 000002AE 206E756D6265727320- <1>
   218 000002B7 3D2000              <1>
   218                              <1>  section .text
   218 00000740 488B3C25[00000000]  <1>  mov rdi, %2
   218 00000748 48BE-               <1>  mov rsi, %%arg1
   218 0000074A [9C02000000000000]  <1>
   218 00000752 B800000000          <1>  mov rax, 0
   218 00000757 E8(00000000)        <1>  call fprintf
   219                                      PrintInt [num], [stdout]
   219                              <1>  section .data
   219 000002BA 256400              <1>  %%arg1 db "%d",0
   219                              <1>  section .text
   219 0000075C 488B3C25[00000000]  <1>  mov rdi, %2
   219 00000764 48BE-               <1>  mov rsi, %%arg1
   219 00000766 [BA02000000000000]  <1>
   219 0000076E 488B1425[04000000]  <1>  mov rdx, %1
   219 00000776 B800000000          <1>  mov rax, 0
   219 0000077B E8(00000000)        <1>  call fprintf
   220                                      PrintStrLn ". Set 0 < number <= 10000", [stdout]
   220                              <1>  section .data
   220 000002BD 2E205365742030203C- <1>  %%arg1 db %1,10,0
   220 000002C6 206E756D626572203C- <1>
   220 000002CF 3D2031303030300A00  <1>
   220                              <1>  section .text
   220 00000780 488B3C25[00000000]  <1>  mov rdi, %2
   220 00000788 48BE-               <1>  mov rsi, %%arg1
   220 0000078A [BD02000000000000]  <1>
   220 00000792 B800000000          <1>  mov rax, 0
   220 00000797 E8(00000000)        <1>  call fprintf
   221                                  .return:
   222 0000079C C9                      leave
   223 0000079D C3                      ret
