     1                                  ;------------------------------------------------------------------------------
     2                                  ; main.asm - содержит главную функцию,
     3                                  ; обеспечивающую простое тестирование
     4                                  ;------------------------------------------------------------------------------
     5                                  ; main.asm
     6                                  
     7                                  global  COMPLEX
     8                                  global  FRACTION
     9                                  global  POLAR
    10                                  
    11                                  extern InRndContainer
    12                                  extern DeleteContainerElements
    13                                  extern ContainerRealAverage
    14                                  
    15                                  %include "macros.mac"
     1                              <1> ; macros.mac - файл с макроопределениями
     2                              <1> 
     3                              <1> extern  fopen
     4                              <1> extern  fscanf
     5                              <1> extern  fclose
     6                              <1> extern  fprintf
     7                              <1> extern  printf
     8                              <1> extern  stdout
     9                              <1> extern  time
    10                              <1> extern  srand
    11                              <1> extern  strcmp
    12                              <1> extern  atoi
    13                              <1> extern  clock
    14                              <1> 
    15                              <1> extern  InContainer
    16                              <1> extern  InRndContainer
    17                              <1> extern  OutContainer
    18                              <1> extern  ContainerRealAverage
    19                              <1> 
    20                              <1> ;-------------------------------------------------------------
    21                              <1> ; Вывод строки символов из буфера
    22                              <1> %macro	PrintStrBuf 2
    23                              <1>         mov rdi, %2
    24                              <1>         mov rsi, %1
    25                              <1>         xor rax, rax
    26                              <1>         call fprintf
    27                              <1> %endmacro
    28                              <1> 
    29                              <1> ;-------------------------------------------------------------
    30                              <1> ; Вывод строки, передаваемой непосредственно макросу
    31                              <1> %macro  PrintStr    2
    32                              <1>     section .data
    33                              <1>         %%arg1  db  %1,0        ; first argument
    34                              <1>     section .text               ; the printf arguments
    35                              <1>         mov rdi, %2
    36                              <1>         mov rsi, %%arg1
    37                              <1>         mov rax, 0              ; no floating point
    38                              <1>         call fprintf
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> ;-------------------------------------------------------------
    42                              <1> ; Вывод строки, передаваемой непосредственно макросу
    43                              <1> ; с переводом на следующую строку
    44                              <1> %macro  PrintStrLn    2
    45                              <1>     section .data
    46                              <1>         %%arg1  db  %1,10,0     ; first argument
    47                              <1>     section .text               ; the printf arguments
    48                              <1>         mov rdi, %2
    49                              <1>         mov rsi, %%arg1
    50                              <1>         mov rax, 0              ; no floating point
    51                              <1>         call fprintf
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> ;-------------------------------------------------------------
    55                              <1> ; Вывод целого числа
    56                              <1> %macro  PrintInt    2
    57                              <1>     section .data
    58                              <1>         %%arg1  db  "%d",0     ; first argument
    59                              <1>     section .text               ; the printf arguments
    60                              <1>         mov rdi, %2
    61                              <1>         mov rsi, %%arg1
    62                              <1>         mov rdx, %1
    63                              <1>         mov rax, 0              ; no floating point
    64                              <1>         call fprintf
    65                              <1> %endmacro
    66                              <1> 
    67                              <1> ;-------------------------------------------------------------
    68                              <1> ; Вывод 64-разрядного беззнакового целого числа
    69                              <1> %macro  PrintLLUns    2
    70                              <1>     section .data
    71                              <1>         %%arg1  db  "%llu",0     ; first argument
    72                              <1>     section .text               ; the printf arguments
    73                              <1>         mov rdi, %2
    74                              <1>         mov rsi, %%arg1
    75                              <1>         mov rdx, %1
    76                              <1>         mov rax, 0              ; no floating point
    77                              <1>         call fprintf
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> ;-------------------------------------------------------------
    81                              <1> ; Вывод действительного числа двойной точности
    82                              <1> %macro  PrintDouble    2
    83                              <1>     section .data
    84                              <1>         %%arg1  db  "%lg",0     ; first argument
    85                              <1>     section .text               ; the printf arguments
    86                              <1>         mov rdi, %2
    87                              <1>         mov rsi, %%arg1
    88                              <1>         movsd xmm0, %1
    89                              <1>         mov rax, 1              ; no floating point
    90                              <1>         call fprintf
    91                              <1> %endmacro
    92                              <1> 
    93                              <1> ;-------------------------------------------------------------
    94                              <1> ; Вывод содержимого контейнера
    95                              <1> %macro  PrintContainer    3
    96                              <1>     mov     rdi, %1
    97                              <1>     mov     esi, %2
    98                              <1>     mov     rdx, %3
    99                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   100                              <1>     call    OutContainer
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;-------------------------------------------------------------
   104                              <1> ; Вычисление суммы вещественных значений чисел в контейнере
   105                              <1> %macro  ContainerAverage    3
   106                              <1>     mov     rdi, %1
   107                              <1>     mov     rsi, %2
   108                              <1>     call    ContainerRealAverage
   109                              <1>     movsd   %3, xmm0
   110                              <1> %endmacro
   111                              <1> 
   112                              <1> ;-------------------------------------------------------------
   113                              <1> ; Удаление чисел контейнера
   114                              <1> %macro  DeleteContainerNumbers    3
   115                              <1>     mov     rdi, %1
   116                              <1>     mov     rsi, %2
   117                              <1>     movsd   xmm0, %3
   118                              <1>     call    DeleteContainerElements
   119                              <1> %endmacro
   120                              <1> 
   121                              <1> ;-------------------------------------------------------------
   122                              <1> ; Открытие файла для чтения, записи
   123                              <1> %macro  FileOpen   3
   124                              <1>     section .data
   125                              <1>         %%rw  db  %2,0          ; признак доступа
   126                              <1>     section .text               ; the printf arguments
   127                              <1>         mov     rdi, %1         ; адрес строки открываемого файла
   128                              <1>         mov     rsi, %%rw       ; строка определяющая чтение-запись. Задается явно
   129                              <1>         ; Или аналог:
   130                              <1>         ;lea     rsi, [%%rw]    ; строка определяющая чтение-запись. Задается явно
   131                              <1>         mov     rax, 0          ; нет чисел с плавающей точкой
   132                              <1>         call    fopen
   133                              <1>         mov     [%3], rax
   134                              <1> %endmacro
   135                              <1> 
   136                              <1> ;-------------------------------------------------------------
   137                              <1> ; Закрытие открытого файла
   138                              <1> %macro  FileClose   1
   139                              <1>     mov     rdi, %1             ; передача указателя на закрываемый файл
   140                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   141                              <1>     call    fclose
   142                              <1> %endmacro
   143                              <1> 
    16                                  
    17                                  section .data
    18 00000000 01000000                    COMPLEX     dd  1
    19 00000004 02000000                    FRACTION    dd  2
    20 00000008 03000000                    POLAR       dd  3
    21 0000000C 000000000000F03F            oneDouble   dq  1.0
    22 00000014 496E636F7272656374-         erMsg1  db "Incorrect number of arguments = %d: ",10,0
    22 0000001D 206E756D626572206F-
    22 00000026 6620617267756D656E-
    22 0000002F 7473203D2025643A20-
    22 00000038 0A00               
    23 0000003A 2D6E00                      rndGen  db "-n",0
    24 0000003D 2D6600                      fileGen  db "-f",0
    25 00000040 696E636F7272656374-         errMessage1 db  "incorrect command line!", 10,"  Waited:",10
    25 00000049 20636F6D6D616E6420-
    25 00000052 6C696E65210A202057-
    25 0000005B 61697465643A0A     
    26 00000062 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    26 0000006B 616E64202D6620696E-
    26 00000074 66696C65206F757466-
    26 0000007D 696C653031206F7574-
    26 00000086 66696C6530320A2020-
    26 0000008F 4F723A0A           
    27 00000093 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    27 0000009C 616E64202D6E206E75-
    27 000000A5 6D626572206F757466-
    27 000000AE 696C653031206F7574-
    27 000000B7 66696C6530320A00   
    28 000000BF 696E636F7272656374-         errMessage2 db  "incorrect qualifier value!", 10,"  Waited:",10
    28 000000C8 207175616C69666965-
    28 000000D1 722076616C7565210A-
    28 000000DA 20205761697465643A-
    28 000000E3 0A                 
    29 000000E4 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    29 000000ED 616E64202D6620696E-
    29 000000F6 66696C65206F757466-
    29 000000FF 696C653031206F7574-
    29 00000108 66696C6530320A2020-
    29 00000111 4F723A0A           
    30 00000115 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    30 0000011E 616E64202D6E206E75-
    30 00000127 6D626572206F757466-
    30 00000130 696C653031206F7574-
    30 00000139 66696C6530320A00   
    31 00000141 00000000                    len         dd  0           ; Количество элементов в массиве
    32                                  section .bss
    33 00000000 <res 00000004>              argc        resd    1
    34 00000004 <res 00000004>              num         resd    1
    35 00000008 <res 00000008>              averageReal         resq    1
    36 00000010 <res 00000008>              start       resq    1       ; начало отсчета времени
    37 00000018 <res 00000008>              delta       resq    1       ; интервал отсчета времени
    38 00000020 <res 00000010>              startTime   resq    2       ; начало отсчета времени
    39 00000030 <res 00000010>              endTime     resq    2       ; конец отсчета времени
    40 00000040 <res 00000010>              deltaTime   resq    2       ; интервал отсчета времени
    41 00000050 <res 00000008>              ifst        resq    1       ; указатель на файл, открываемый файл для чтения чисел
    42 00000058 <res 00000008>              ofst1       resq    1       ; указатель на файл, открываемый файл для записи контейнера
    43 00000060 <res 00000008>              ofst2       resq    1       ; указатель на файл, открываемый файл для записи вещественного значения
    44 00000068 <res 00027100>              cont        resb    160000  ; Массив используемый для хранения данных
    45                                  
    46                                  section .text
    47                                      global main
    48                                  main:
    49 00000000 55                      push rbp
    50 00000001 4889E5                  mov rbp,rsp
    51                                  
    52 00000004 893C25[00000000]            mov dword [argc], edi ;rdi contains number of arguments
    53 0000000B 4989FC                      mov r12, rdi ;rdi contains number of arguments
    54 0000000E 4989F5                      mov r13, rsi ;rsi contains the address to the array of arguments
    55                                  
    56                                  .printArguments:
    57                                      PrintStrLn "The command and arguments:", [stdout]
    57                              <1>  section .data
    57 00000145 54686520636F6D6D61- <1>  %%arg1 db %1,10,0
    57 0000014E 6E6420616E64206172- <1>
    57 00000157 67756D656E74733A0A- <1>
    57 00000160 00                  <1>
    57                              <1>  section .text
    57 00000011 488B3C25[00000000]  <1>  mov rdi, %2
    57 00000019 48BE-               <1>  mov rsi, %%arg1
    57 0000001B [4501000000000000]  <1>
    57 00000023 B800000000          <1>  mov rax, 0
    57 00000028 E8(00000000)        <1>  call fprintf
    58 0000002D BB00000000                  mov rbx, 0
    59                                  .printLoop:
    60                                      PrintStrBuf qword [r13+rbx*8], [stdout]
    60 00000032 488B3C25[00000000]  <1>  mov rdi, %2
    60 0000003A 498B74DD00          <1>  mov rsi, %1
    60 0000003F 4831C0              <1>  xor rax, rax
    60 00000042 E8(00000000)        <1>  call fprintf
    61                                      PrintStr    10, [stdout]
    61                              <1>  section .data
    61 00000161 0A00                <1>  %%arg1 db %1,0
    61                              <1>  section .text
    61 00000047 488B3C25[00000000]  <1>  mov rdi, %2
    61 0000004F 48BE-               <1>  mov rsi, %%arg1
    61 00000051 [6101000000000000]  <1>
    61 00000059 B800000000          <1>  mov rax, 0
    61 0000005E E8(00000000)        <1>  call fprintf
    62 00000063 48FFC3                      inc rbx
    63 00000066 4C39E3                      cmp rbx, r12
    64 00000069 7CC7                        jl .printLoop
    65                                  
    66                                      PrintStrLn  "", [stdout]
    66                              <1>  section .data
    66 00000163 0A00                <1>  %%arg1 db %1,10,0
    66                              <1>  section .text
    66 0000006B 488B3C25[00000000]  <1>  mov rdi, %2
    66 00000073 48BE-               <1>  mov rsi, %%arg1
    66 00000075 [6301000000000000]  <1>
    66 0000007D B800000000          <1>  mov rax, 0
    66 00000082 E8(00000000)        <1>  call fprintf
    67                                  
    68 00000087 4983FC05                    cmp r12, 5      ; проверка количества аргументов
    69 0000008B 741F                        je .start
    70                                      PrintStrBuf errMessage1, [stdout]
    70 0000008D 488B3C25[00000000]  <1>  mov rdi, %2
    70 00000095 48BE-               <1>  mov rsi, %1
    70 00000097 [4000000000000000]  <1>
    70 0000009F 4831C0              <1>  xor rax, rax
    70 000000A2 E8(00000000)        <1>  call fprintf
    71 000000A7 E9FE050000                  jmp .return
    72                                  .start:
    73 000000AC B8E4000000                  mov rax, 228
    74 000000B1 31FF                        xor edi, edi
    75 000000B3 488D3425[20000000]          lea rsi, [startTime]
    76 000000BB 0F05                        syscall
    77                                  
    78                                      
    79                                      PrintStrLn "Start", [stdout]
    79                              <1>  section .data
    79 00000165 53746172740A00      <1>  %%arg1 db %1,10,0
    79                              <1>  section .text
    79 000000BD 488B3C25[00000000]  <1>  mov rdi, %2
    79 000000C5 48BE-               <1>  mov rsi, %%arg1
    79 000000C7 [6501000000000000]  <1>
    79 000000CF B800000000          <1>  mov rax, 0
    79 000000D4 E8(00000000)        <1>  call fprintf
    80                                      ; Проверка второго аргумента
    81 000000D9 48BF-                       mov rdi, rndGen     ; признак для сравнения
    81 000000DB [3A00000000000000] 
    82 000000E3 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    83 000000E7 E8(00000000)                call strcmp
    84 000000EC 4883F800                    cmp rax, 0
    85 000000F0 743C                        je .next2
    86 000000F2 48BF-                       mov rdi, fileGen
    86 000000F4 [3D00000000000000] 
    87 000000FC 498B7508                    mov rsi, [r13+8]
    88 00000100 E8(00000000)                call strcmp
    89 00000105 4883F800                    cmp rax, 0
    90 00000109 0F8482000000                je .next3
    91                                      PrintStrBuf errMessage2, [stdout]
    91 0000010F 488B3C25[00000000]  <1>  mov rdi, %2
    91 00000117 48BE-               <1>  mov rsi, %1
    91 00000119 [BF00000000000000]  <1>
    91 00000121 4831C0              <1>  xor rax, rax
    91 00000124 E8(00000000)        <1>  call fprintf
    92 00000129 E97C050000                  jmp .return
    93                                      
    94                                  .next2:
    95                                      ; Генерация случайных чисел
    96 0000012E 498B7D10                    mov rdi, [r13+16]
    97 00000132 E8(00000000)                call atoi
    98 00000137 890425[04000000]            mov [num], eax
    99 0000013E 8B0425[04000000]            mov eax, [num]
   100 00000145 83F801                      cmp eax, 1
   101 00000148 0F8C00050000                jl .fall1
   102 0000014E 3D10270000                  cmp eax, 10000
   103 00000153 0F8FF5040000                jg .fall1
   104                                  
   105                                      ; Начальная установка генератора случайных чисел
   106 00000159 4831FF                      xor     rdi, rdi
   107 0000015C 4831C0                      xor     rax, rax
   108 0000015F E8(00000000)                call    time
   109 00000164 4889C7                      mov     rdi, rax
   110 00000167 4831C0                      xor     rax, rax
   111 0000016A E8(00000000)                call    srand
   112                                      ; Заполнение контейнера случайными фигурами
   113 0000016F 48BF-                       mov     rdi, cont   ; передача адреса контейнера
   113 00000171 [6800000000000000] 
   114 00000179 48BE-                       mov     rsi, len    ; передача адреса для длины
   114 0000017B [4101000000000000] 
   115 00000183 8B1425[04000000]            mov     edx, [num]  ; передача количества порождаемых фигур
   116 0000018A E8(00000000)                call    InRndContainer
   117 0000018F EB58                        jmp     .checkLen
   118                                  
   119                                  .next3:
   120                                      ; Получение фигур из файла
   121                                      FileOpen [r13+16], "r", ifst
   121                              <1>  section .data
   121 0000016C 7200                <1>  %%rw db %2,0
   121                              <1>  section .text
   121 00000191 498B7D10            <1>  mov rdi, %1
   121 00000195 48BE-               <1>  mov rsi, %%rw
   121 00000197 [6C01000000000000]  <1>
   121                              <1> 
   121                              <1> 
   121 0000019F B800000000          <1>  mov rax, 0
   121 000001A4 E8(00000000)        <1>  call fopen
   121 000001A9 48890425[50000000]  <1>  mov [%3], rax
   122                                      ; Заполнение контейнера числами из файла
   123 000001B1 48BF-                       mov     rdi, cont           ; адрес контейнера
   123 000001B3 [6800000000000000] 
   124 000001BB 48BE-                       mov     rsi, len            ; адрес для установки числа элементов
   124 000001BD [4101000000000000] 
   125 000001C5 488B1425[50000000]          mov     rdx, [ifst]         ; указатель на файл
   126 000001CD 4831C0                      xor     rax, rax
   127 000001D0 E8(00000000)                call    InContainer         ; ввод данных в контейнер
   128                                      FileClose [ifst]
   128 000001D5 488B3C25[50000000]  <1>  mov rdi, %1
   128 000001DD B800000000          <1>  mov rax, 0
   128 000001E2 E8(00000000)        <1>  call fclose
   129 000001E7 EB00                        jmp .checkLen
   130                                  
   131                                  .checkLen:
   132 000001E9 8B0425[41010000]            mov     eax, [len]
   133 000001F0 83F801                      cmp     eax, 1
   134 000001F3 0F8C55040000                jl      .fall1
   135 000001F9 3D10270000                  cmp     eax, 10000
   136 000001FE 0F8F4A040000                jg      .fall1
   137 00000204 EB00                        jmp     .task2
   138                                  
   139                                  .task2:
   140                                      ; Вывод содержимого контейнера
   141                                      PrintStrLn "Filled container:", [stdout]
   141                              <1>  section .data
   141 0000016E 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   141 00000177 6E7461696E65723A0A- <1>
   141 00000180 00                  <1>
   141                              <1>  section .text
   141 00000206 488B3C25[00000000]  <1>  mov rdi, %2
   141 0000020E 48BE-               <1>  mov rsi, %%arg1
   141 00000210 [6E01000000000000]  <1>
   141 00000218 B800000000          <1>  mov rax, 0
   141 0000021D E8(00000000)        <1>  call fprintf
   142                                      PrintContainer cont, [len], [stdout]
   142 00000222 48BF-               <1>  mov rdi, %1
   142 00000224 [6800000000000000]  <1>
   142 0000022C 8B3425[41010000]    <1>  mov esi, %2
   142 00000233 488B1425[00000000]  <1>  mov rdx, %3
   142 0000023B B800000000          <1>  mov rax, 0
   142 00000240 E8(00000000)        <1>  call OutContainer
   143                                  
   144                                      FileOpen [r13+24], "w", ofst1
   144                              <1>  section .data
   144 00000181 7700                <1>  %%rw db %2,0
   144                              <1>  section .text
   144 00000245 498B7D18            <1>  mov rdi, %1
   144 00000249 48BE-               <1>  mov rsi, %%rw
   144 0000024B [8101000000000000]  <1>
   144                              <1> 
   144                              <1> 
   144 00000253 B800000000          <1>  mov rax, 0
   144 00000258 E8(00000000)        <1>  call fopen
   144 0000025D 48890425[58000000]  <1>  mov [%3], rax
   145                                      PrintStrLn "Filled container:", [ofst1]
   145                              <1>  section .data
   145 00000183 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   145 0000018C 6E7461696E65723A0A- <1>
   145 00000195 00                  <1>
   145                              <1>  section .text
   145 00000265 488B3C25[58000000]  <1>  mov rdi, %2
   145 0000026D 48BE-               <1>  mov rsi, %%arg1
   145 0000026F [8301000000000000]  <1>
   145 00000277 B800000000          <1>  mov rax, 0
   145 0000027C E8(00000000)        <1>  call fprintf
   146                                      PrintContainer cont, [len], [ofst1]
   146 00000281 48BF-               <1>  mov rdi, %1
   146 00000283 [6800000000000000]  <1>
   146 0000028B 8B3425[41010000]    <1>  mov esi, %2
   146 00000292 488B1425[58000000]  <1>  mov rdx, %3
   146 0000029A B800000000          <1>  mov rax, 0
   146 0000029F E8(00000000)        <1>  call OutContainer
   147                                      FileClose [ofst1]
   147 000002A4 488B3C25[58000000]  <1>  mov rdi, %1
   147 000002AC B800000000          <1>  mov rax, 0
   147 000002B1 E8(00000000)        <1>  call fclose
   148                                  
   149                                  .deleteElemsFromCont:
   150                                      
   151                                      ContainerAverage cont, [len], [averageReal]
   151 000002B6 48BF-               <1>  mov rdi, %1
   151 000002B8 [6800000000000000]  <1>
   151 000002C0 488B3425[41010000]  <1>  mov rsi, %2
   151 000002C8 E8(00000000)        <1>  call ContainerRealAverage
   151 000002CD F20F110425-         <1>  movsd %3, xmm0
   151 000002D2 [08000000]          <1>
   152                                      DeleteContainerNumbers cont, [len], [averageReal]
   152 000002D6 48BF-               <1>  mov rdi, %1
   152 000002D8 [6800000000000000]  <1>
   152 000002E0 488B3425[41010000]  <1>  mov rsi, %2
   152 000002E8 F20F100425-         <1>  movsd xmm0, %3
   152 000002ED [08000000]          <1>
   152 000002F1 E8(00000000)        <1>  call DeleteContainerElements
   153 000002F6 48893425[41010000]          mov [len], rsi
   154                                  
   155                                      ; Вычисление времени завершения
   156 000002FE B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   157 00000303 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   158 00000305 488D3425[30000000]          lea rsi, [endTime]
   159 0000030D 0F05                        syscall        ; [time] contains number of seconds
   160                                                     ; [time + 8] contains number of nanoseconds
   161                                  
   162                                  
   163                                      
   164                                      ; Получение времени работы
   165 0000030F 488B0425[30000000]          mov rax, [endTime]
   166 00000317 482B0425[20000000]          sub rax, [startTime]
   167 0000031F 488B1C25[38000000]          mov rbx, [endTime+8]
   168 00000327 488B0C25[28000000]          mov rcx, [startTime+8]
   169 0000032F 4839CB                      cmp rbx, rcx
   170 00000332 7D0A                        jge .subNanoOnly
   171                                      ; иначе занимаем секунду
   172 00000334 48FFC8                      dec rax
   173 00000337 4881C300CA9A3B              add rbx, 1000000000
   174                                  .subNanoOnly:
   175 0000033E 482B1C25[28000000]          sub rbx, [startTime+8]
   176 00000346 48890425[40000000]          mov [deltaTime], rax
   177 0000034E 48891C25[48000000]          mov [deltaTime+8], rbx
   178                                  
   179                                      ; Вывод вещественного значения нескольких чисел
   180                                      PrintStrLn  "", [stdout]
   180                              <1>  section .data
   180 00000196 0A00                <1>  %%arg1 db %1,10,0
   180                              <1>  section .text
   180 00000356 488B3C25[00000000]  <1>  mov rdi, %2
   180 0000035E 48BE-               <1>  mov rsi, %%arg1
   180 00000360 [9601000000000000]  <1>
   180 00000368 B800000000          <1>  mov rax, 0
   180 0000036D E8(00000000)        <1>  call fprintf
   181                                      PrintStrLn  "Container after deleting numbers:", [stdout]
   181                              <1>  section .data
   181 00000198 436F6E7461696E6572- <1>  %%arg1 db %1,10,0
   181 000001A1 206166746572206465- <1>
   181 000001AA 6C6574696E67206E75- <1>
   181 000001B3 6D626572733A0A00    <1>
   181                              <1>  section .text
   181 00000372 488B3C25[00000000]  <1>  mov rdi, %2
   181 0000037A 48BE-               <1>  mov rsi, %%arg1
   181 0000037C [9801000000000000]  <1>
   181 00000384 B800000000          <1>  mov rax, 0
   181 00000389 E8(00000000)        <1>  call fprintf
   182                                      PrintContainer cont, [len], [stdout]
   182 0000038E 48BF-               <1>  mov rdi, %1
   182 00000390 [6800000000000000]  <1>
   182 00000398 8B3425[41010000]    <1>  mov esi, %2
   182 0000039F 488B1425[00000000]  <1>  mov rdx, %3
   182 000003A7 B800000000          <1>  mov rax, 0
   182 000003AC E8(00000000)        <1>  call OutContainer
   183                                      PrintStrLn  "", [stdout]
   183                              <1>  section .data
   183 000001BB 0A00                <1>  %%arg1 db %1,10,0
   183                              <1>  section .text
   183 000003B1 488B3C25[00000000]  <1>  mov rdi, %2
   183 000003B9 48BE-               <1>  mov rsi, %%arg1
   183 000003BB [BB01000000000000]  <1>
   183 000003C3 B800000000          <1>  mov rax, 0
   183 000003C8 E8(00000000)        <1>  call fprintf
   184                                      PrintStr    "Average real = ", [stdout]
   184                              <1>  section .data
   184 000001BD 417665726167652072- <1>  %%arg1 db %1,0
   184 000001C6 65616C203D2000      <1>
   184                              <1>  section .text
   184 000003CD 488B3C25[00000000]  <1>  mov rdi, %2
   184 000003D5 48BE-               <1>  mov rsi, %%arg1
   184 000003D7 [BD01000000000000]  <1>
   184 000003DF B800000000          <1>  mov rax, 0
   184 000003E4 E8(00000000)        <1>  call fprintf
   185                                      PrintDouble [averageReal], [stdout]
   185                              <1>  section .data
   185 000001CD 256C6700            <1>  %%arg1 db "%lg",0
   185                              <1>  section .text
   185 000003E9 488B3C25[00000000]  <1>  mov rdi, %2
   185 000003F1 48BE-               <1>  mov rsi, %%arg1
   185 000003F3 [CD01000000000000]  <1>
   185 000003FB F20F100425-         <1>  movsd xmm0, %1
   185 00000400 [08000000]          <1>
   185 00000404 B801000000          <1>  mov rax, 1
   185 00000409 E8(00000000)        <1>  call fprintf
   186                                      PrintStr    ". Calculaton time = ", [stdout]
   186                              <1>  section .data
   186 000001D1 2E2043616C63756C61- <1>  %%arg1 db %1,0
   186 000001DA 746F6E2074696D6520- <1>
   186 000001E3 3D2000              <1>
   186                              <1>  section .text
   186 0000040E 488B3C25[00000000]  <1>  mov rdi, %2
   186 00000416 48BE-               <1>  mov rsi, %%arg1
   186 00000418 [D101000000000000]  <1>
   186 00000420 B800000000          <1>  mov rax, 0
   186 00000425 E8(00000000)        <1>  call fprintf
   187                                  
   188                                      PrintLLUns  [deltaTime], [stdout]
   188                              <1>  section .data
   188 000001E6 256C6C7500          <1>  %%arg1 db "%llu",0
   188                              <1>  section .text
   188 0000042A 488B3C25[00000000]  <1>  mov rdi, %2
   188 00000432 48BE-               <1>  mov rsi, %%arg1
   188 00000434 [E601000000000000]  <1>
   188 0000043C 488B1425[40000000]  <1>  mov rdx, %1
   188 00000444 B800000000          <1>  mov rax, 0
   188 00000449 E8(00000000)        <1>  call fprintf
   189                                      PrintStr    " sec, ", [stdout]
   189                              <1>  section .data
   189 000001EB 207365632C2000      <1>  %%arg1 db %1,0
   189                              <1>  section .text
   189 0000044E 488B3C25[00000000]  <1>  mov rdi, %2
   189 00000456 48BE-               <1>  mov rsi, %%arg1
   189 00000458 [EB01000000000000]  <1>
   189 00000460 B800000000          <1>  mov rax, 0
   189 00000465 E8(00000000)        <1>  call fprintf
   190                                      PrintLLUns  [deltaTime+8], [stdout]
   190                              <1>  section .data
   190 000001F2 256C6C7500          <1>  %%arg1 db "%llu",0
   190                              <1>  section .text
   190 0000046A 488B3C25[00000000]  <1>  mov rdi, %2
   190 00000472 48BE-               <1>  mov rsi, %%arg1
   190 00000474 [F201000000000000]  <1>
   190 0000047C 488B1425[48000000]  <1>  mov rdx, %1
   190 00000484 B800000000          <1>  mov rax, 0
   190 00000489 E8(00000000)        <1>  call fprintf
   191                                      PrintStr    " nsec", [stdout]
   191                              <1>  section .data
   191 000001F7 206E73656300        <1>  %%arg1 db %1,0
   191                              <1>  section .text
   191 0000048E 488B3C25[00000000]  <1>  mov rdi, %2
   191 00000496 48BE-               <1>  mov rsi, %%arg1
   191 00000498 [F701000000000000]  <1>
   191 000004A0 B800000000          <1>  mov rax, 0
   191 000004A5 E8(00000000)        <1>  call fprintf
   192                                      PrintStr    10, [stdout]
   192                              <1>  section .data
   192 000001FD 0A00                <1>  %%arg1 db %1,0
   192                              <1>  section .text
   192 000004AA 488B3C25[00000000]  <1>  mov rdi, %2
   192 000004B2 48BE-               <1>  mov rsi, %%arg1
   192 000004B4 [FD01000000000000]  <1>
   192 000004BC B800000000          <1>  mov rax, 0
   192 000004C1 E8(00000000)        <1>  call fprintf
   193                                  
   194                                      FileOpen    [r13+32], "w", ofst2
   194                              <1>  section .data
   194 000001FF 7700                <1>  %%rw db %2,0
   194                              <1>  section .text
   194 000004C6 498B7D20            <1>  mov rdi, %1
   194 000004CA 48BE-               <1>  mov rsi, %%rw
   194 000004CC [FF01000000000000]  <1>
   194                              <1> 
   194                              <1> 
   194 000004D4 B800000000          <1>  mov rax, 0
   194 000004D9 E8(00000000)        <1>  call fopen
   194 000004DE 48890425[60000000]  <1>  mov [%3], rax
   195                                      PrintStrLn  "Container after deleting numbers:", [ofst2]
   195                              <1>  section .data
   195 00000201 436F6E7461696E6572- <1>  %%arg1 db %1,10,0
   195 0000020A 206166746572206465- <1>
   195 00000213 6C6574696E67206E75- <1>
   195 0000021C 6D626572733A0A00    <1>
   195                              <1>  section .text
   195 000004E6 488B3C25[60000000]  <1>  mov rdi, %2
   195 000004EE 48BE-               <1>  mov rsi, %%arg1
   195 000004F0 [0102000000000000]  <1>
   195 000004F8 B800000000          <1>  mov rax, 0
   195 000004FD E8(00000000)        <1>  call fprintf
   196                                      PrintContainer cont, [len], [ofst2]
   196 00000502 48BF-               <1>  mov rdi, %1
   196 00000504 [6800000000000000]  <1>
   196 0000050C 8B3425[41010000]    <1>  mov esi, %2
   196 00000513 488B1425[60000000]  <1>  mov rdx, %3
   196 0000051B B800000000          <1>  mov rax, 0
   196 00000520 E8(00000000)        <1>  call OutContainer
   197                                      PrintStr    "Average real = ", [ofst2]
   197                              <1>  section .data
   197 00000224 417665726167652072- <1>  %%arg1 db %1,0
   197 0000022D 65616C203D2000      <1>
   197                              <1>  section .text
   197 00000525 488B3C25[60000000]  <1>  mov rdi, %2
   197 0000052D 48BE-               <1>  mov rsi, %%arg1
   197 0000052F [2402000000000000]  <1>
   197 00000537 B800000000          <1>  mov rax, 0
   197 0000053C E8(00000000)        <1>  call fprintf
   198                                      PrintDouble [averageReal], [ofst2]
   198                              <1>  section .data
   198 00000234 256C6700            <1>  %%arg1 db "%lg",0
   198                              <1>  section .text
   198 00000541 488B3C25[60000000]  <1>  mov rdi, %2
   198 00000549 48BE-               <1>  mov rsi, %%arg1
   198 0000054B [3402000000000000]  <1>
   198 00000553 F20F100425-         <1>  movsd xmm0, %1
   198 00000558 [08000000]          <1>
   198 0000055C B801000000          <1>  mov rax, 1
   198 00000561 E8(00000000)        <1>  call fprintf
   199                                      PrintStr    ". Calculaton time = ", [ofst2]
   199                              <1>  section .data
   199 00000238 2E2043616C63756C61- <1>  %%arg1 db %1,0
   199 00000241 746F6E2074696D6520- <1>
   199 0000024A 3D2000              <1>
   199                              <1>  section .text
   199 00000566 488B3C25[60000000]  <1>  mov rdi, %2
   199 0000056E 48BE-               <1>  mov rsi, %%arg1
   199 00000570 [3802000000000000]  <1>
   199 00000578 B800000000          <1>  mov rax, 0
   199 0000057D E8(00000000)        <1>  call fprintf
   200                                      PrintLLUns  [deltaTime], [ofst2]
   200                              <1>  section .data
   200 0000024D 256C6C7500          <1>  %%arg1 db "%llu",0
   200                              <1>  section .text
   200 00000582 488B3C25[60000000]  <1>  mov rdi, %2
   200 0000058A 48BE-               <1>  mov rsi, %%arg1
   200 0000058C [4D02000000000000]  <1>
   200 00000594 488B1425[40000000]  <1>  mov rdx, %1
   200 0000059C B800000000          <1>  mov rax, 0
   200 000005A1 E8(00000000)        <1>  call fprintf
   201                                      PrintStr    " sec, ", [ofst2]
   201                              <1>  section .data
   201 00000252 207365632C2000      <1>  %%arg1 db %1,0
   201                              <1>  section .text
   201 000005A6 488B3C25[60000000]  <1>  mov rdi, %2
   201 000005AE 48BE-               <1>  mov rsi, %%arg1
   201 000005B0 [5202000000000000]  <1>
   201 000005B8 B800000000          <1>  mov rax, 0
   201 000005BD E8(00000000)        <1>  call fprintf
   202                                      PrintLLUns  [deltaTime+8], [ofst2]
   202                              <1>  section .data
   202 00000259 256C6C7500          <1>  %%arg1 db "%llu",0
   202                              <1>  section .text
   202 000005C2 488B3C25[60000000]  <1>  mov rdi, %2
   202 000005CA 48BE-               <1>  mov rsi, %%arg1
   202 000005CC [5902000000000000]  <1>
   202 000005D4 488B1425[48000000]  <1>  mov rdx, %1
   202 000005DC B800000000          <1>  mov rax, 0
   202 000005E1 E8(00000000)        <1>  call fprintf
   203                                      PrintStr    " nsec", [ofst2]
   203                              <1>  section .data
   203 0000025E 206E73656300        <1>  %%arg1 db %1,0
   203                              <1>  section .text
   203 000005E6 488B3C25[60000000]  <1>  mov rdi, %2
   203 000005EE 48BE-               <1>  mov rsi, %%arg1
   203 000005F0 [5E02000000000000]  <1>
   203 000005F8 B800000000          <1>  mov rax, 0
   203 000005FD E8(00000000)        <1>  call fprintf
   204                                      PrintStr    10, [ofst2]
   204                              <1>  section .data
   204 00000264 0A00                <1>  %%arg1 db %1,0
   204                              <1>  section .text
   204 00000602 488B3C25[60000000]  <1>  mov rdi, %2
   204 0000060A 48BE-               <1>  mov rsi, %%arg1
   204 0000060C [6402000000000000]  <1>
   204 00000614 B800000000          <1>  mov rax, 0
   204 00000619 E8(00000000)        <1>  call fprintf
   205                                      FileClose   [ofst2]
   205 0000061E 488B3C25[60000000]  <1>  mov rdi, %1
   205 00000626 B800000000          <1>  mov rax, 0
   205 0000062B E8(00000000)        <1>  call fclose
   206                                  
   207                                      PrintStrLn "Stop", [stdout]
   207                              <1>  section .data
   207 00000266 53746F700A00        <1>  %%arg1 db %1,10,0
   207                              <1>  section .text
   207 00000630 488B3C25[00000000]  <1>  mov rdi, %2
   207 00000638 48BE-               <1>  mov rsi, %%arg1
   207 0000063A [6602000000000000]  <1>
   207 00000642 B800000000          <1>  mov rax, 0
   207 00000647 E8(00000000)        <1>  call fprintf
   208 0000064C EB5C                        jmp .return
   209                                  .fall1:
   210                                      PrintStr "incorrect numer of numbers = ", [stdout]
   210                              <1>  section .data
   210 0000026C 696E636F7272656374- <1>  %%arg1 db %1,0
   210 00000275 206E756D6572206F66- <1>
   210 0000027E 206E756D6265727320- <1>
   210 00000287 3D2000              <1>
   210                              <1>  section .text
   210 0000064E 488B3C25[00000000]  <1>  mov rdi, %2
   210 00000656 48BE-               <1>  mov rsi, %%arg1
   210 00000658 [6C02000000000000]  <1>
   210 00000660 B800000000          <1>  mov rax, 0
   210 00000665 E8(00000000)        <1>  call fprintf
   211                                      PrintInt [num], [stdout]
   211                              <1>  section .data
   211 0000028A 256400              <1>  %%arg1 db "%d",0
   211                              <1>  section .text
   211 0000066A 488B3C25[00000000]  <1>  mov rdi, %2
   211 00000672 48BE-               <1>  mov rsi, %%arg1
   211 00000674 [8A02000000000000]  <1>
   211 0000067C 488B1425[04000000]  <1>  mov rdx, %1
   211 00000684 B800000000          <1>  mov rax, 0
   211 00000689 E8(00000000)        <1>  call fprintf
   212                                      PrintStrLn ". Set 0 < number <= 10000", [stdout]
   212                              <1>  section .data
   212 0000028D 2E205365742030203C- <1>  %%arg1 db %1,10,0
   212 00000296 206E756D626572203C- <1>
   212 0000029F 3D2031303030300A00  <1>
   212                              <1>  section .text
   212 0000068E 488B3C25[00000000]  <1>  mov rdi, %2
   212 00000696 48BE-               <1>  mov rsi, %%arg1
   212 00000698 [8D02000000000000]  <1>
   212 000006A0 B800000000          <1>  mov rax, 0
   212 000006A5 E8(00000000)        <1>  call fprintf
   213                                  .return:
   214 000006AA C9                      leave
   215 000006AB C3                      ret
